name: Android Test

on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run Android tests'
        required: true
        default: 'true'
        type: boolean

jobs:
  android-test:
    if: github.actor == github.repository_owner
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34

    - name: Install system images and emulator
      run: |
        echo "Installing system images..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/sdkmanager "system-images;android-34;google_apis;x86_64"
        echo "Installing emulator..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/sdkmanager "emulator"
        echo "Installing platform-tools..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/sdkmanager "platform-tools"
        echo "Verifying installations..."
        $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/sdkmanager --list_installed | grep -E "(system-images|emulator|platform-tools)"

    - name: Install Android NDK
      run: |
        yes | sdkmanager "ndk;25.2.9519653"
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android

    - name: Install cargo-ndk
      run: cargo install cargo-ndk

    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Setup Android SDK PATH
      run: |
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "HOME: $HOME"
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/16.0/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/emulator" >> $GITHUB_ENV
        ls -la $ANDROID_SDK_ROOT/
        echo "Setting up Android directories..."
        mkdir -p $HOME/.android
        chmod 755 $HOME/.android
        export ANDROID_AVD_HOME=$HOME/.android/avd
        echo "ANDROID_AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV

    - name: Create AVD
      run: |
        echo "Creating AVD..."
        mkdir -p $HOME/.android/avd
        echo "Checking installed packages..."
        $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/sdkmanager --list_installed
        echo "Checking available system images..."
        $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/sdkmanager --list | grep "system-images;android-34" | head -5
        echo "Creating AVD with basic configuration..."
        echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/avdmanager create avd --force -n test -k "system-images;android-34;google_apis;x86_64" --abi google_apis/x86_64 --path $HOME/.android/avd/test.avd || {
          echo "First attempt failed, trying alternative method..."
          echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/avdmanager create avd --force -n test -k "system-images;android-34;google_apis;x86_64"
        }
        echo "Checking AVD creation result..."
        $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/avdmanager list avd
        echo "Checking AVD directory structure..."
        ls -la $HOME/.android/avd/
        if [ -d "$HOME/.android/avd/test.avd" ]; then
          echo "AVD directory found:"
          ls -la $HOME/.android/avd/test.avd/
        fi

    - name: Start emulator in background
      run: |
        echo "Checking if AVD exists..."
        $ANDROID_SDK_ROOT/cmdline-tools/16.0/bin/avdmanager list avd
        if [ -f "$HOME/.android/avd/test.avd/config.ini" ]; then
          echo "AVD config found, starting emulator..."
          nohup $ANDROID_SDK_ROOT/emulator/emulator -avd test -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot -wipe-data > emulator.log 2>&1 &
          echo "Emulator started in background"
          sleep 10
          echo "Checking emulator log..."
          cat emulator.log | head -20 || echo "No log yet"
        else
          echo "AVD not found! Cannot start emulator."
          ls -la $HOME/.android/avd/
          exit 1
        fi

    - name: Wait for emulator to be ready
      run: |
        echo "Waiting for device..."
        adb wait-for-device
        echo "Device detected, waiting for boot completion..."
        timeout 300 bash -c 'while [[ -z $(adb shell getprop sys.boot_completed 2>/dev/null | tr -d "\r") ]]; do echo "Waiting for boot..."; sleep 5; done'
        echo "Boot completed, unlocking screen..."
        adb shell input keyevent 82
        echo "Emulator is ready"

    - name: Create REMOTE_ANDROID file
      run: |
        cat > REMOTE_ANDROID << EOF
        arm64-v8a
        aarch64
        /data/rsbinder
        EOF

    - name: Check emulator status before build
      run: |
        echo "Checking emulator status..."
        adb devices -l
        echo "Checking device properties..."
        timeout 10 adb shell "getprop ro.build.version.release" || echo "Property check failed"
        timeout 10 adb shell "whoami" || echo "User check failed"

    - name: Run ndk_prepare
      run: |
        source ./envsetup.sh
        ndk_prepare

    - name: Run ndk_build and ndk_sync
      run: |
        source ./envsetup.sh
        ndk_build && ndk_sync

    - name: Run test_service on Android device
      run: |
        echo "Starting test_service in background..."
        echo "Checking adb connection..."
        adb devices
        echo "Checking /data/rsbinder directory..."
        timeout 30 adb shell "ls -la /data/rsbinder/" || echo "Directory check failed"
        echo "Starting test_service with timeout..."
        timeout 30 adb shell "cd /data/rsbinder && ./test_service > test_service.log 2>&1 &" || echo "test_service start command completed"
        echo "test_service start command executed"
        sleep 2
        echo "Checking if test_service is running..."
        timeout 10 adb shell "ps | grep test_service" && echo "test_service is running successfully" || echo "test_service may not be running"

    - name: Verify test_service is running
      run: |
        echo "Waiting for test_service to stabilize..."
        sleep 3
        echo "Checking test_service process with timeout..."
        timeout 10 adb shell "ps | grep test_service" || echo "test_service process check completed"
        echo "Checking /data/rsbinder directory:"
        timeout 10 adb shell "ls -la /data/rsbinder/" || echo "Directory check failed"
        echo "Checking test_service log:"
        timeout 10 adb shell "cat /data/rsbinder/test_service.log | head -10" || echo "No log output yet"
        echo "Test setup completed successfully!"
        echo "test_service execution attempted on Android emulator"

    - name: Run tests on Android device
      run: |
        echo "Looking for test executables..."
        timeout 10 adb shell "ls -la /data/rsbinder/tests-*" || echo "No test executables found"
        echo "Finding and running test executables..."
        timeout 30 adb shell "
          cd /data/rsbinder
          for test_file in tests-*; do
            if [ -f \"\$test_file\" ] && [ -x \"\$test_file\" ]; then
              echo \"Running test: \$test_file\"
              chmod +x \"\$test_file\"
              ./\"\$test_file\" || echo \"Test \$test_file completed with errors\"
              echo \"Finished running: \$test_file\"
              echo \"---\"
            fi
          done
        " || echo "Test execution completed with timeout"
        echo "All tests execution attempted"
