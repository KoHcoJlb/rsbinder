/* automatically generated by rust-bindgen 0.60.1 */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const BINDERFS_MAX_NAME: u32 = 255;
pub const B_TYPE_LARGE: u32 = 133;
pub const BINDER_CURRENT_PROTOCOL_VERSION: u32 = 8;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    fn test_field_fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__kernel_fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__kernel_fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    test_field_fds_bits();
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    fn test_field_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__kernel_fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__kernel_fsid_t),
                "::",
                stringify!(val)
            )
        );
    }
    test_field_val();
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigset_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_usec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    test_field_tv_usec();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_nsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    test_field_tv_nsec();
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    fn test_field___fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(__fds_bits)
            )
        );
    }
    test_field___fds_bits();
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    fn test_field___low() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__atomic_wide_counter__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
    }
    test_field___low();
    fn test_field___high() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__atomic_wide_counter__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    test_field___high();
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    fn test_field___value64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__atomic_wide_counter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter),
                "::",
                stringify!(__value64)
            )
        );
    }
    test_field___value64();
    fn test_field___value32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__atomic_wide_counter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter),
                "::",
                stringify!(__value32)
            )
        );
    }
    test_field___value32();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    fn test_field___prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
    }
    test_field___prev();
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_slist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_slist),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    fn test_field___lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
    }
    test_field___lock();
    fn test_field___count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
    }
    test_field___count();
    fn test_field___owner() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
    }
    test_field___owner();
    fn test_field___nusers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
    }
    test_field___nusers();
    fn test_field___kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
    }
    test_field___kind();
    fn test_field___spins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
    }
    test_field___spins();
    fn test_field___elision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
    }
    test_field___elision();
    fn test_field___list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    test_field___list();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    fn test_field___readers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
    }
    test_field___readers();
    fn test_field___writers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
    }
    test_field___writers();
    fn test_field___wrphase_futex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
    }
    test_field___wrphase_futex();
    fn test_field___writers_futex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
    }
    test_field___writers_futex();
    fn test_field___pad3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
    }
    test_field___pad3();
    fn test_field___pad4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
    }
    test_field___pad4();
    fn test_field___cur_writer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
    }
    test_field___cur_writer();
    fn test_field___shared() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
    }
    test_field___shared();
    fn test_field___rwelision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
    }
    test_field___rwelision();
    fn test_field___pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
    }
    test_field___pad1();
    fn test_field___pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
    }
    test_field___pad2();
    fn test_field___flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    test_field___flags();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    fn test_field___wseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wseq)
            )
        );
    }
    test_field___wseq();
    fn test_field___g1_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_start)
            )
        );
    }
    test_field___g1_start();
    fn test_field___g_refs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
    }
    test_field___g_refs();
    fn test_field___g_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
    }
    test_field___g_size();
    fn test_field___g1_orig_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
    }
    test_field___g1_orig_size();
    fn test_field___wrefs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
    }
    test_field___wrefs();
    fn test_field___g_signals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    test_field___g_signals();
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__once_flag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__once_flag),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[doc = " struct binderfs_device - retrieve information about a new binder device"]
#[doc = " @name:   the name to use for the new binderfs binder device"]
#[doc = " @major:  major number allocated for binderfs binder devices"]
#[doc = " @minor:  minor number allocated for the new binderfs binder device"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binderfs_device {
    pub name: [::std::os::raw::c_char; 256usize],
    pub major: __u32,
    pub minor: __u32,
}
#[test]
fn bindgen_test_layout_binderfs_device() {
    assert_eq!(
        ::std::mem::size_of::<binderfs_device>(),
        264usize,
        concat!("Size of: ", stringify!(binderfs_device))
    );
    assert_eq!(
        ::std::mem::align_of::<binderfs_device>(),
        4usize,
        concat!("Alignment of ", stringify!(binderfs_device))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binderfs_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binderfs_device),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binderfs_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(binderfs_device),
                "::",
                stringify!(major)
            )
        );
    }
    test_field_major();
    fn test_field_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binderfs_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize
            },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(binderfs_device),
                "::",
                stringify!(minor)
            )
        );
    }
    test_field_minor();
}
pub const BINDER_TYPE_BINDER: _bindgen_ty_1 = 1935813253;
pub const BINDER_TYPE_WEAK_BINDER: _bindgen_ty_1 = 2002922117;
pub const BINDER_TYPE_HANDLE: _bindgen_ty_1 = 1936206469;
pub const BINDER_TYPE_WEAK_HANDLE: _bindgen_ty_1 = 2003315333;
pub const BINDER_TYPE_FD: _bindgen_ty_1 = 1717840517;
pub const BINDER_TYPE_FDA: _bindgen_ty_1 = 1717854597;
pub const BINDER_TYPE_PTR: _bindgen_ty_1 = 1886661253;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const FLAT_BINDER_FLAG_PRIORITY_MASK: _bindgen_ty_2 = 255;
pub const FLAT_BINDER_FLAG_ACCEPTS_FDS: _bindgen_ty_2 = 256;
#[doc = " @FLAT_BINDER_FLAG_TXN_SECURITY_CTX: request security contexts"]
#[doc = ""]
#[doc = " Only when set, causes senders to include their security"]
#[doc = " context"]
pub const FLAT_BINDER_FLAG_TXN_SECURITY_CTX: _bindgen_ty_2 = 4096;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type binder_size_t = __u64;
pub type binder_uintptr_t = __u64;
#[doc = " struct binder_object_header - header shared by all binder metadata objects."]
#[doc = " @type:\ttype of the object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_object_header {
    pub type_: __u32,
}
#[test]
fn bindgen_test_layout_binder_object_header() {
    assert_eq!(
        ::std::mem::size_of::<binder_object_header>(),
        4usize,
        concat!("Size of: ", stringify!(binder_object_header))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_object_header>(),
        4usize,
        concat!("Alignment of ", stringify!(binder_object_header))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_object_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_object_header),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flat_binder_object {
    pub hdr: binder_object_header,
    pub flags: __u32,
    pub __bindgen_anon_1: flat_binder_object__bindgen_ty_1,
    pub cookie: binder_uintptr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flat_binder_object__bindgen_ty_1 {
    pub binder: binder_uintptr_t,
    pub handle: __u32,
}
#[test]
fn bindgen_test_layout_flat_binder_object__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<flat_binder_object__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(flat_binder_object__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<flat_binder_object__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(flat_binder_object__bindgen_ty_1)
        )
    );
    fn test_field_binder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<flat_binder_object__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).binder) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(flat_binder_object__bindgen_ty_1),
                "::",
                stringify!(binder)
            )
        );
    }
    test_field_binder();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<flat_binder_object__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(flat_binder_object__bindgen_ty_1),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
}
#[test]
fn bindgen_test_layout_flat_binder_object() {
    assert_eq!(
        ::std::mem::size_of::<flat_binder_object>(),
        24usize,
        concat!("Size of: ", stringify!(flat_binder_object))
    );
    assert_eq!(
        ::std::mem::align_of::<flat_binder_object>(),
        8usize,
        concat!("Alignment of ", stringify!(flat_binder_object))
    );
    fn test_field_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<flat_binder_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(flat_binder_object),
                "::",
                stringify!(hdr)
            )
        );
    }
    test_field_hdr();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<flat_binder_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(flat_binder_object),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<flat_binder_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(flat_binder_object),
                "::",
                stringify!(cookie)
            )
        );
    }
    test_field_cookie();
}
#[doc = " struct binder_fd_object - describes a filedescriptor to be fixed up."]
#[doc = " @hdr:\tcommon header structure"]
#[doc = " @pad_flags:\tpadding to remain compatible with old userspace code"]
#[doc = " @pad_binder:\tpadding to remain compatible with old userspace code"]
#[doc = " @fd:\t\tfile descriptor"]
#[doc = " @cookie:\topaque data, used by user-space"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binder_fd_object {
    pub hdr: binder_object_header,
    pub pad_flags: __u32,
    pub __bindgen_anon_1: binder_fd_object__bindgen_ty_1,
    pub cookie: binder_uintptr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union binder_fd_object__bindgen_ty_1 {
    pub pad_binder: binder_uintptr_t,
    pub fd: __u32,
}
#[test]
fn bindgen_test_layout_binder_fd_object__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<binder_fd_object__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(binder_fd_object__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_fd_object__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_fd_object__bindgen_ty_1))
    );
    fn test_field_pad_binder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_object__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad_binder) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_object__bindgen_ty_1),
                "::",
                stringify!(pad_binder)
            )
        );
    }
    test_field_pad_binder();
    fn test_field_fd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_object__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_object__bindgen_ty_1),
                "::",
                stringify!(fd)
            )
        );
    }
    test_field_fd();
}
#[test]
fn bindgen_test_layout_binder_fd_object() {
    assert_eq!(
        ::std::mem::size_of::<binder_fd_object>(),
        24usize,
        concat!("Size of: ", stringify!(binder_fd_object))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_fd_object>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_fd_object))
    );
    fn test_field_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_object),
                "::",
                stringify!(hdr)
            )
        );
    }
    test_field_hdr();
    fn test_field_pad_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad_flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_object),
                "::",
                stringify!(pad_flags)
            )
        );
    }
    test_field_pad_flags();
    fn test_field_cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_object),
                "::",
                stringify!(cookie)
            )
        );
    }
    test_field_cookie();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_buffer_object {
    pub hdr: binder_object_header,
    pub flags: __u32,
    pub buffer: binder_uintptr_t,
    pub length: binder_size_t,
    pub parent: binder_size_t,
    pub parent_offset: binder_size_t,
}
#[test]
fn bindgen_test_layout_binder_buffer_object() {
    assert_eq!(
        ::std::mem::size_of::<binder_buffer_object>(),
        40usize,
        concat!("Size of: ", stringify!(binder_buffer_object))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_buffer_object>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_buffer_object))
    );
    fn test_field_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_buffer_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_buffer_object),
                "::",
                stringify!(hdr)
            )
        );
    }
    test_field_hdr();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_buffer_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_buffer_object),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_buffer_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_buffer_object),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_buffer_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_buffer_object),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_parent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_buffer_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_buffer_object),
                "::",
                stringify!(parent)
            )
        );
    }
    test_field_parent();
    fn test_field_parent_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_buffer_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent_offset) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_buffer_object),
                "::",
                stringify!(parent_offset)
            )
        );
    }
    test_field_parent_offset();
}
pub const BINDER_BUFFER_FLAG_HAS_PARENT: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_fd_array_object {
    pub hdr: binder_object_header,
    pub pad: __u32,
    pub num_fds: binder_size_t,
    pub parent: binder_size_t,
    pub parent_offset: binder_size_t,
}
#[test]
fn bindgen_test_layout_binder_fd_array_object() {
    assert_eq!(
        ::std::mem::size_of::<binder_fd_array_object>(),
        32usize,
        concat!("Size of: ", stringify!(binder_fd_array_object))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_fd_array_object>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_fd_array_object))
    );
    fn test_field_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_array_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_array_object),
                "::",
                stringify!(hdr)
            )
        );
    }
    test_field_hdr();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_array_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_array_object),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_num_fds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_array_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_fds) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_array_object),
                "::",
                stringify!(num_fds)
            )
        );
    }
    test_field_num_fds();
    fn test_field_parent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_array_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_array_object),
                "::",
                stringify!(parent)
            )
        );
    }
    test_field_parent();
    fn test_field_parent_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_fd_array_object>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent_offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_fd_array_object),
                "::",
                stringify!(parent_offset)
            )
        );
    }
    test_field_parent_offset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_write_read {
    pub write_size: binder_size_t,
    pub write_consumed: binder_size_t,
    pub write_buffer: binder_uintptr_t,
    pub read_size: binder_size_t,
    pub read_consumed: binder_size_t,
    pub read_buffer: binder_uintptr_t,
}
#[test]
fn bindgen_test_layout_binder_write_read() {
    assert_eq!(
        ::std::mem::size_of::<binder_write_read>(),
        48usize,
        concat!("Size of: ", stringify!(binder_write_read))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_write_read>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_write_read))
    );
    fn test_field_write_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_write_read>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).write_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_write_read),
                "::",
                stringify!(write_size)
            )
        );
    }
    test_field_write_size();
    fn test_field_write_consumed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_write_read>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).write_consumed) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_write_read),
                "::",
                stringify!(write_consumed)
            )
        );
    }
    test_field_write_consumed();
    fn test_field_write_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_write_read>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).write_buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_write_read),
                "::",
                stringify!(write_buffer)
            )
        );
    }
    test_field_write_buffer();
    fn test_field_read_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_write_read>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).read_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_write_read),
                "::",
                stringify!(read_size)
            )
        );
    }
    test_field_read_size();
    fn test_field_read_consumed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_write_read>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).read_consumed) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_write_read),
                "::",
                stringify!(read_consumed)
            )
        );
    }
    test_field_read_consumed();
    fn test_field_read_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_write_read>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).read_buffer) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_write_read),
                "::",
                stringify!(read_buffer)
            )
        );
    }
    test_field_read_buffer();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_version {
    pub protocol_version: __s32,
}
#[test]
fn bindgen_test_layout_binder_version() {
    assert_eq!(
        ::std::mem::size_of::<binder_version>(),
        4usize,
        concat!("Size of: ", stringify!(binder_version))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_version>(),
        4usize,
        concat!("Alignment of ", stringify!(binder_version))
    );
    fn test_field_protocol_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).protocol_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_version),
                "::",
                stringify!(protocol_version)
            )
        );
    }
    test_field_protocol_version();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_node_debug_info {
    pub ptr: binder_uintptr_t,
    pub cookie: binder_uintptr_t,
    pub has_strong_ref: __u32,
    pub has_weak_ref: __u32,
}
#[test]
fn bindgen_test_layout_binder_node_debug_info() {
    assert_eq!(
        ::std::mem::size_of::<binder_node_debug_info>(),
        24usize,
        concat!("Size of: ", stringify!(binder_node_debug_info))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_node_debug_info>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_node_debug_info))
    );
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_debug_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_debug_info),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
    fn test_field_cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_debug_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_debug_info),
                "::",
                stringify!(cookie)
            )
        );
    }
    test_field_cookie();
    fn test_field_has_strong_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_debug_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_strong_ref) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_debug_info),
                "::",
                stringify!(has_strong_ref)
            )
        );
    }
    test_field_has_strong_ref();
    fn test_field_has_weak_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_debug_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_weak_ref) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_debug_info),
                "::",
                stringify!(has_weak_ref)
            )
        );
    }
    test_field_has_weak_ref();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_node_info_for_ref {
    pub handle: __u32,
    pub strong_count: __u32,
    pub weak_count: __u32,
    pub reserved1: __u32,
    pub reserved2: __u32,
    pub reserved3: __u32,
}
#[test]
fn bindgen_test_layout_binder_node_info_for_ref() {
    assert_eq!(
        ::std::mem::size_of::<binder_node_info_for_ref>(),
        24usize,
        concat!("Size of: ", stringify!(binder_node_info_for_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_node_info_for_ref>(),
        4usize,
        concat!("Alignment of ", stringify!(binder_node_info_for_ref))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_info_for_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_info_for_ref),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_strong_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_info_for_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strong_count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_info_for_ref),
                "::",
                stringify!(strong_count)
            )
        );
    }
    test_field_strong_count();
    fn test_field_weak_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_info_for_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).weak_count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_info_for_ref),
                "::",
                stringify!(weak_count)
            )
        );
    }
    test_field_weak_count();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_info_for_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_info_for_ref),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_info_for_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_info_for_ref),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_node_info_for_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_node_info_for_ref),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_freeze_info {
    pub pid: __u32,
    pub enable: __u32,
    pub timeout_ms: __u32,
}
#[test]
fn bindgen_test_layout_binder_freeze_info() {
    assert_eq!(
        ::std::mem::size_of::<binder_freeze_info>(),
        12usize,
        concat!("Size of: ", stringify!(binder_freeze_info))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_freeze_info>(),
        4usize,
        concat!("Alignment of ", stringify!(binder_freeze_info))
    );
    fn test_field_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_freeze_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_freeze_info),
                "::",
                stringify!(pid)
            )
        );
    }
    test_field_pid();
    fn test_field_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_freeze_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_freeze_info),
                "::",
                stringify!(enable)
            )
        );
    }
    test_field_enable();
    fn test_field_timeout_ms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_freeze_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeout_ms) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_freeze_info),
                "::",
                stringify!(timeout_ms)
            )
        );
    }
    test_field_timeout_ms();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_frozen_status_info {
    pub pid: __u32,
    pub sync_recv: __u32,
    pub async_recv: __u32,
}
#[test]
fn bindgen_test_layout_binder_frozen_status_info() {
    assert_eq!(
        ::std::mem::size_of::<binder_frozen_status_info>(),
        12usize,
        concat!("Size of: ", stringify!(binder_frozen_status_info))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_frozen_status_info>(),
        4usize,
        concat!("Alignment of ", stringify!(binder_frozen_status_info))
    );
    fn test_field_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_frozen_status_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_frozen_status_info),
                "::",
                stringify!(pid)
            )
        );
    }
    test_field_pid();
    fn test_field_sync_recv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_frozen_status_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sync_recv) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_frozen_status_info),
                "::",
                stringify!(sync_recv)
            )
        );
    }
    test_field_sync_recv();
    fn test_field_async_recv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_frozen_status_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).async_recv) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_frozen_status_info),
                "::",
                stringify!(async_recv)
            )
        );
    }
    test_field_async_recv();
}
pub const transaction_flags_TF_ONE_WAY: transaction_flags = 1;
pub const transaction_flags_TF_ROOT_OBJECT: transaction_flags = 4;
pub const transaction_flags_TF_STATUS_CODE: transaction_flags = 8;
pub const transaction_flags_TF_ACCEPT_FDS: transaction_flags = 16;
pub const transaction_flags_TF_CLEAR_BUF: transaction_flags = 32;
pub type transaction_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binder_transaction_data {
    pub target: binder_transaction_data__bindgen_ty_1,
    pub cookie: binder_uintptr_t,
    pub code: __u32,
    pub flags: __u32,
    pub sender_pid: pid_t,
    pub sender_euid: uid_t,
    pub data_size: binder_size_t,
    pub offsets_size: binder_size_t,
    pub data: binder_transaction_data__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union binder_transaction_data__bindgen_ty_1 {
    pub handle: __u32,
    pub ptr: binder_uintptr_t,
}
#[test]
fn bindgen_test_layout_binder_transaction_data__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<binder_transaction_data__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(binder_transaction_data__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<binder_transaction_data__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(binder_transaction_data__bindgen_ty_1)
        )
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<binder_transaction_data__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data__bindgen_ty_1),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<binder_transaction_data__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data__bindgen_ty_1),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union binder_transaction_data__bindgen_ty_2 {
    pub ptr: binder_transaction_data__bindgen_ty_2__bindgen_ty_1,
    pub buf: [__u8; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_transaction_data__bindgen_ty_2__bindgen_ty_1 {
    pub buffer: binder_uintptr_t,
    pub offsets: binder_uintptr_t,
}
#[test]
fn bindgen_test_layout_binder_transaction_data__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<binder_transaction_data__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(binder_transaction_data__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<binder_transaction_data__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(binder_transaction_data__bindgen_ty_2__bindgen_ty_1)
        )
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    binder_transaction_data__bindgen_ty_2__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_offsets() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    binder_transaction_data__bindgen_ty_2__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offsets) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(offsets)
            )
        );
    }
    test_field_offsets();
}
#[test]
fn bindgen_test_layout_binder_transaction_data__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<binder_transaction_data__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(binder_transaction_data__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<binder_transaction_data__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(binder_transaction_data__bindgen_ty_2)
        )
    );
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<binder_transaction_data__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data__bindgen_ty_2),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
    fn test_field_buf() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<binder_transaction_data__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data__bindgen_ty_2),
                "::",
                stringify!(buf)
            )
        );
    }
    test_field_buf();
}
#[test]
fn bindgen_test_layout_binder_transaction_data() {
    assert_eq!(
        ::std::mem::size_of::<binder_transaction_data>(),
        64usize,
        concat!("Size of: ", stringify!(binder_transaction_data))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_transaction_data>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_transaction_data))
    );
    fn test_field_target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(target)
            )
        );
    }
    test_field_target();
    fn test_field_cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(cookie)
            )
        );
    }
    test_field_cookie();
    fn test_field_code() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(code)
            )
        );
    }
    test_field_code();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_sender_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sender_pid) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(sender_pid)
            )
        );
    }
    test_field_sender_pid();
    fn test_field_sender_euid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sender_euid) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(sender_euid)
            )
        );
    }
    test_field_sender_euid();
    fn test_field_data_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(data_size)
            )
        );
    }
    test_field_data_size();
    fn test_field_offsets_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offsets_size) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(offsets_size)
            )
        );
    }
    test_field_offsets_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binder_transaction_data_secctx {
    pub transaction_data: binder_transaction_data,
    pub secctx: binder_uintptr_t,
}
#[test]
fn bindgen_test_layout_binder_transaction_data_secctx() {
    assert_eq!(
        ::std::mem::size_of::<binder_transaction_data_secctx>(),
        72usize,
        concat!("Size of: ", stringify!(binder_transaction_data_secctx))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_transaction_data_secctx>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_transaction_data_secctx))
    );
    fn test_field_transaction_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data_secctx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transaction_data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data_secctx),
                "::",
                stringify!(transaction_data)
            )
        );
    }
    test_field_transaction_data();
    fn test_field_secctx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data_secctx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).secctx) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data_secctx),
                "::",
                stringify!(secctx)
            )
        );
    }
    test_field_secctx();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binder_transaction_data_sg {
    pub transaction_data: binder_transaction_data,
    pub buffers_size: binder_size_t,
}
#[test]
fn bindgen_test_layout_binder_transaction_data_sg() {
    assert_eq!(
        ::std::mem::size_of::<binder_transaction_data_sg>(),
        72usize,
        concat!("Size of: ", stringify!(binder_transaction_data_sg))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_transaction_data_sg>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_transaction_data_sg))
    );
    fn test_field_transaction_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data_sg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transaction_data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data_sg),
                "::",
                stringify!(transaction_data)
            )
        );
    }
    test_field_transaction_data();
    fn test_field_buffers_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_transaction_data_sg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffers_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_transaction_data_sg),
                "::",
                stringify!(buffers_size)
            )
        );
    }
    test_field_buffers_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_ptr_cookie {
    pub ptr: binder_uintptr_t,
    pub cookie: binder_uintptr_t,
}
#[test]
fn bindgen_test_layout_binder_ptr_cookie() {
    assert_eq!(
        ::std::mem::size_of::<binder_ptr_cookie>(),
        16usize,
        concat!("Size of: ", stringify!(binder_ptr_cookie))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_ptr_cookie>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_ptr_cookie))
    );
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_ptr_cookie>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_ptr_cookie),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
    fn test_field_cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_ptr_cookie>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_ptr_cookie),
                "::",
                stringify!(cookie)
            )
        );
    }
    test_field_cookie();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct binder_handle_cookie {
    pub handle: __u32,
    pub cookie: binder_uintptr_t,
}
#[test]
fn bindgen_test_layout_binder_handle_cookie() {
    assert_eq!(
        ::std::mem::size_of::<binder_handle_cookie>(),
        12usize,
        concat!("Size of: ", stringify!(binder_handle_cookie))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_handle_cookie>(),
        1usize,
        concat!("Alignment of ", stringify!(binder_handle_cookie))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_handle_cookie>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_handle_cookie),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_handle_cookie>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_handle_cookie),
                "::",
                stringify!(cookie)
            )
        );
    }
    test_field_cookie();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_pri_desc {
    pub priority: __s32,
    pub desc: __u32,
}
#[test]
fn bindgen_test_layout_binder_pri_desc() {
    assert_eq!(
        ::std::mem::size_of::<binder_pri_desc>(),
        8usize,
        concat!("Size of: ", stringify!(binder_pri_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_pri_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(binder_pri_desc))
    );
    fn test_field_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_pri_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_pri_desc),
                "::",
                stringify!(priority)
            )
        );
    }
    test_field_priority();
    fn test_field_desc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_pri_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_pri_desc),
                "::",
                stringify!(desc)
            )
        );
    }
    test_field_desc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binder_pri_ptr_cookie {
    pub priority: __s32,
    pub ptr: binder_uintptr_t,
    pub cookie: binder_uintptr_t,
}
#[test]
fn bindgen_test_layout_binder_pri_ptr_cookie() {
    assert_eq!(
        ::std::mem::size_of::<binder_pri_ptr_cookie>(),
        24usize,
        concat!("Size of: ", stringify!(binder_pri_ptr_cookie))
    );
    assert_eq!(
        ::std::mem::align_of::<binder_pri_ptr_cookie>(),
        8usize,
        concat!("Alignment of ", stringify!(binder_pri_ptr_cookie))
    );
    fn test_field_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_pri_ptr_cookie>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_pri_ptr_cookie),
                "::",
                stringify!(priority)
            )
        );
    }
    test_field_priority();
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_pri_ptr_cookie>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_pri_ptr_cookie),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
    fn test_field_cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<binder_pri_ptr_cookie>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(binder_pri_ptr_cookie),
                "::",
                stringify!(cookie)
            )
        );
    }
    test_field_cookie();
}
pub const binder_driver_return_protocol_BR_ERROR: binder_driver_return_protocol = 2147774976;
pub const binder_driver_return_protocol_BR_OK: binder_driver_return_protocol = 29185;
pub const binder_driver_return_protocol_BR_TRANSACTION_SEC_CTX: binder_driver_return_protocol =
    2152231426;
pub const binder_driver_return_protocol_BR_TRANSACTION: binder_driver_return_protocol = 2151707138;
pub const binder_driver_return_protocol_BR_REPLY: binder_driver_return_protocol = 2151707139;
pub const binder_driver_return_protocol_BR_ACQUIRE_RESULT: binder_driver_return_protocol =
    2147774980;
pub const binder_driver_return_protocol_BR_DEAD_REPLY: binder_driver_return_protocol = 29189;
pub const binder_driver_return_protocol_BR_TRANSACTION_COMPLETE: binder_driver_return_protocol =
    29190;
pub const binder_driver_return_protocol_BR_INCREFS: binder_driver_return_protocol = 2148561415;
pub const binder_driver_return_protocol_BR_ACQUIRE: binder_driver_return_protocol = 2148561416;
pub const binder_driver_return_protocol_BR_RELEASE: binder_driver_return_protocol = 2148561417;
pub const binder_driver_return_protocol_BR_DECREFS: binder_driver_return_protocol = 2148561418;
pub const binder_driver_return_protocol_BR_ATTEMPT_ACQUIRE: binder_driver_return_protocol =
    2149085707;
pub const binder_driver_return_protocol_BR_NOOP: binder_driver_return_protocol = 29196;
pub const binder_driver_return_protocol_BR_SPAWN_LOOPER: binder_driver_return_protocol = 29197;
pub const binder_driver_return_protocol_BR_FINISHED: binder_driver_return_protocol = 29198;
pub const binder_driver_return_protocol_BR_DEAD_BINDER: binder_driver_return_protocol = 2148037135;
pub const binder_driver_return_protocol_BR_CLEAR_DEATH_NOTIFICATION_DONE:
    binder_driver_return_protocol = 2148037136;
pub const binder_driver_return_protocol_BR_FAILED_REPLY: binder_driver_return_protocol = 29201;
pub const binder_driver_return_protocol_BR_FROZEN_REPLY: binder_driver_return_protocol = 29202;
pub const binder_driver_return_protocol_BR_ONEWAY_SPAM_SUSPECT: binder_driver_return_protocol =
    29203;
pub type binder_driver_return_protocol = ::std::os::raw::c_uint;
pub const binder_driver_command_protocol_BC_TRANSACTION: binder_driver_command_protocol =
    1077961472;
pub const binder_driver_command_protocol_BC_REPLY: binder_driver_command_protocol = 1077961473;
pub const binder_driver_command_protocol_BC_ACQUIRE_RESULT: binder_driver_command_protocol =
    1074029314;
pub const binder_driver_command_protocol_BC_FREE_BUFFER: binder_driver_command_protocol =
    1074291459;
pub const binder_driver_command_protocol_BC_INCREFS: binder_driver_command_protocol = 1074029316;
pub const binder_driver_command_protocol_BC_ACQUIRE: binder_driver_command_protocol = 1074029317;
pub const binder_driver_command_protocol_BC_RELEASE: binder_driver_command_protocol = 1074029318;
pub const binder_driver_command_protocol_BC_DECREFS: binder_driver_command_protocol = 1074029319;
pub const binder_driver_command_protocol_BC_INCREFS_DONE: binder_driver_command_protocol =
    1074815752;
pub const binder_driver_command_protocol_BC_ACQUIRE_DONE: binder_driver_command_protocol =
    1074815753;
pub const binder_driver_command_protocol_BC_ATTEMPT_ACQUIRE: binder_driver_command_protocol =
    1074291466;
pub const binder_driver_command_protocol_BC_REGISTER_LOOPER: binder_driver_command_protocol = 25355;
pub const binder_driver_command_protocol_BC_ENTER_LOOPER: binder_driver_command_protocol = 25356;
pub const binder_driver_command_protocol_BC_EXIT_LOOPER: binder_driver_command_protocol = 25357;
pub const binder_driver_command_protocol_BC_REQUEST_DEATH_NOTIFICATION:
    binder_driver_command_protocol = 1074553614;
pub const binder_driver_command_protocol_BC_CLEAR_DEATH_NOTIFICATION:
    binder_driver_command_protocol = 1074553615;
pub const binder_driver_command_protocol_BC_DEAD_BINDER_DONE: binder_driver_command_protocol =
    1074291472;
pub const binder_driver_command_protocol_BC_TRANSACTION_SG: binder_driver_command_protocol =
    1078485777;
pub const binder_driver_command_protocol_BC_REPLY_SG: binder_driver_command_protocol = 1078485778;
pub type binder_driver_command_protocol = ::std::os::raw::c_uint;
